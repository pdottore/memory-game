{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","process","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAW,GAA4C,IAA1CC,EAAI,EAAJA,KAAMC,EAAY,EAAZA,aAAcC,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAQ9D,OACI,qBAAKC,UAAU,OAAM,SACjB,sBAAKA,UAAWF,EAAU,UAAY,GAAG,UACvC,qBAAKE,UAAU,QAAQC,IAAKC,eAAyBN,EAAKK,IAAKE,IAAI,eACnE,qBACEH,UAAU,OACVC,IAAKC,6BACLE,QAbQ,WACXL,GACDF,EAAaD,EAErB,EAUYO,IAAI,kBAKpB,CCnBA,IAAME,EAAa,CAClB,CAAE,IAAO,sBAAuBC,SAAS,GACzC,CAAE,IAAO,sBAAuBA,SAAS,GACzC,CAAE,IAAO,wBAAyBA,SAAS,GAC3C,CAAE,IAAO,qBAAsBA,SAAS,GACxC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,yBAA0BA,SAAS,IAkF9BC,MA/Ef,WACE,MAA0BC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KACtB,EAA0BF,mBAAS,GAAE,mBAA9BG,EAAK,KAAEC,EAAQ,KACtB,EAAkCJ,mBAAS,MAAK,mBAAzCK,EAAS,KAAEC,EAAY,KAC9B,EAAkCN,mBAAS,MAAK,mBAAzCO,EAAS,KAAEC,EAAY,KAC9B,EAAgCR,oBAAS,GAAM,mBAAxCT,EAAQ,KAAEkB,EAAW,KAGtBC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAeA,GACxCe,MAAK,kBAAMC,KAAKC,SAAW,EAAG,IAC9BC,KAAI,SAAC3B,GAAI,kCAAWA,GAAI,IAAE4B,GAAIH,KAAKC,UAAQ,IAC5CR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,EACX,EAGMf,EAAe,SAACD,GACpBiB,EAAYG,EAAapB,GAAQkB,EAAalB,EAChD,EAGA6B,qBAAU,WACJZ,GAAaE,IACfE,GAAY,GACRJ,EAAUZ,MAAQc,EAAUd,KAC9BS,GAAS,SAAAgB,GACP,OAAOA,EAAUH,KAAI,SAAA3B,GACnB,OAAIA,EAAKK,MAAQY,EAAUZ,IAClB,2BAAIL,GAAI,IAAEU,SAAS,IAEnBV,CAEX,GACF,IACA+B,KAEAC,YAAW,kBAAMD,GAAW,GAAE,KAGpC,GAAG,CAACd,EAAWE,IAIf,IAAMY,EAAY,WAChBb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAiB,GAAS,OAAIA,EAAY,CAAC,IACnCZ,GAAY,EACd,EAOA,OAJAQ,qBAAU,WACRP,GACF,GAAG,IAGD,sBAAKlB,UAAU,MAAK,UAClB,8CACA,wBAAQI,QAASc,EAAa,sBAE9B,qBAAKlB,UAAU,YAAW,SACvBS,EAAMc,KAAI,SAAA3B,GAAI,OACb,cAAC,EAAU,CAETA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASiB,GAAajB,IAASmB,GAAanB,EAAKU,QAC1DP,SAAUA,GAJLH,EAAK4B,GAKV,MAGN,wCAAWb,OAGjB,ECrFAmB,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.1471e9f4.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\r\n    \r\n    const handleClick = () => {\r\n        if (!disabled) {\r\n            handleChoice(card)\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <div className=\"card\">\r\n            <div className={flipped ? \"flipped\" : \"\"}>\r\n              <img className=\"front\" src={process.env.PUBLIC_URL + card.src} alt=\"card front\" />\r\n              <img \r\n                className=\"back\" \r\n                src={process.env.PUBLIC_URL + '/img/cover.png'} \r\n                onClick={handleClick}\r\n                alt=\"card back\" \r\n            />\r\n            </div>\r\n          </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages = [\n { \"src\": \"/img/random-cat.png\", matched: false }, \n { \"src\": \"/img/proper-bud.png\", matched: false }, \n { \"src\": \"/img/offended-bud.png\", matched: false },\n { \"src\": \"/img/cute-coop.png\", matched: false },\n { \"src\": \"/img/big-tuna.png\", matched: false },\n { \"src\": \"/img/slippery-coop.png\", matched: false }\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  // shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n    .sort(() => Math.random() - 0.5)\n    .map((card) => ({ ...card, id: Math.random() }))\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setCards(shuffledCards)\n    setTurns(0)\n  }\n\n  //handle a choice \n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  // compare 2 selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true)\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {...card, matched: true}\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n\n  // reset choices & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n  // start a new game auto\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n  \n  return (\n    <div className=\"App\">\n      <h1>Find the Bud</h1>\n      <button onClick={shuffleCards}>New Game</button>\n    \n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard \n            key={card.id} \n            card={card} \n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}